(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{486:function(e,n,a){"use strict";a.r(n);var s=a(38),r=Object(s.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"springmvc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springmvc"}},[e._v("#")]),e._v(" SpringMVC")]),e._v(" "),a("h2",{attrs:{id:"遇到的问题以及解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遇到的问题以及解决方法"}},[e._v("#")]),e._v(" 遇到的问题以及解决方法")]),e._v(" "),a("p",[e._v("配置好ssm环境后第一次启动出现错误")]),e._v(" "),a("img",{attrs:{src:e.$withBase("/assets/img/image-20210726181207653.png")}}),e._v("\n![image-20210726181207653](../.vuepress/public/assets/img/image-20210726181207653.png)\n"),a("img",{attrs:{src:e.$withBase("/assets/img/image-20210726181320980.png")}}),e._v("\n![image-20210726181320980](../.vuepress/public/assets/img/image-20210726181320980.png)\n"),a("p",[e._v("问题：Bean不存在")]),e._v(" "),a("p",[e._v("解决思路：1.看bean是否注入成功，能否成功跳转。")]),e._v(" "),a("p",[e._v("​\t\t\t\t\t2.Junit测试单元，看代码是否能够查询出结果")]),e._v(" "),a("p",[e._v("​\t\t\t\t\t3.如果没问题，那就不是底层出错，是springmvc出错了，根据提示是找不到bean，验证后发现，web中引用的classpath是springmvc.xml哪里买呢确实没有，bean在Spring-mvc.xml中，应该引用Application.xml，即几个配置文件结合在一起的配置文件。")]),e._v(" "),a("p",[e._v("bobo:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<build>--\x3e\n\n\x3c!--        <resources>--\x3e\n\x3c!--            <resource>--\x3e\n\x3c!--                <directory>src/main/java/</directory>--\x3e\n\x3c!--                <includes>--\x3e\n\x3c!--                    <include>**/*.xml</include>--\x3e\n\x3c!--                </includes>--\x3e\n\x3c!--            </resource>--\x3e\n\x3c!--        </resources>--\x3e\n\x3c!--    </build>--\x3e\n")])])]),a("h2",{attrs:{id:"环境配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境配置"}},[e._v("#")]),e._v(" 环境配置")]),e._v(" "),a("p",[e._v("1.新建项目 后再pom.xml中写入依赖")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  \t \x3c!--    依赖--\x3e\n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>5.1.9.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n            <version>2.5</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet.jsp</groupId>\n            <artifactId>jsp-api</artifactId>\n            <version>2.2</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>jstl</artifactId>\n            <version>1.2</version>\n        </dependency>\n    </dependencies>\n")])])]),a("p",[e._v("2.新建模块")]),e._v(" "),a("p",[e._v("3.添加web支持")]),e._v(" "),a("p",[e._v("4.配置TomCat 注意导包，以及默认的访问路径")]),e._v(" "),a("p",[e._v("5.配置模块的pom.xml导入json包和lombok包")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <parent>\n        <artifactId>SpringMVC</artifactId>\n        <groupId>org.example</groupId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>Springmvc05-json</artifactId>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>2.11.4</version>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.16.20</version>\n        </dependency>\n    </dependencies>\n</project>\n')])])]),a("p",[e._v("6.配置web.xml")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"\n        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"\n        version="4.0">\n\n   \x3c!--1.注册servlet--\x3e\n   <servlet>\n       <servlet-name>SpringMVC</servlet-name>\n       <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n       \x3c!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--\x3e\n       <init-param>\n           <param-name>contextConfigLocation</param-name>\n           <param-value>classpath:springmvc-servlet.xml</param-value>\n       </init-param>\n       \x3c!-- 启动顺序，数字越小，启动越早 --\x3e\n       <load-on-startup>1</load-on-startup>\n   </servlet>\n\n   \x3c!--所有请求都会被springmvc拦截 --\x3e\n   <servlet-mapping>\n       <servlet-name>SpringMVC</servlet-name>\n       <url-pattern>/</url-pattern>\n   </servlet-mapping>\n\n   <filter>\n       <filter-name>encoding</filter-name>\n       <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n       <init-param>\n           <param-name>encoding</param-name>\n           <param-value>utf-8</param-value>\n       </init-param>\n   </filter>\n   <filter-mapping>\n       <filter-name>encoding</filter-name>\n       <url-pattern>/</url-pattern>\n   </filter-mapping>\n\n</web-app>\n')])])]),a("p",[e._v("7.resources下新建springmvc-serlvlet.xml")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n     xmlns:context="http://www.springframework.org/schema/context"\n      xmlns:mvc="http://www.springframework.org/schema/mvc"\n     xsi:schemaLocation="http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       https://www.springframework.org/schema/context/spring-context.xsd\n       http://www.springframework.org/schema/mvc\n       https://www.springframework.org/schema/mvc/spring-mvc.xsd">\n\n   \x3c!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --\x3e\n   <context:component-scan base-package="com.kuang.controller"/>\n\n   \x3c!-- 视图解析器 --\x3e\n   <beanclass="org.springframework.web.servlet.view.InternalResourceViewResolver"\n         id="internalResourceViewResolver">\n       \x3c!-- 前缀 --\x3e\n       <property name="prefix" value="/WEB-INF/jsp/" />\n       \x3c!-- 后缀 --\x3e\n       <property name="suffix" value=".jsp" />\n   </bean>\n\n</beans>\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("LinkedHashMap\nModelMap 继承了LinkedHashMap，拥有LinkedHashMap的全部功能\nModel：继承了ModelMap，是精简版，一般情况使用他\n\n\n")])])]),a("p",[e._v("今日问题：为什么无法访问 WEB-INF下的")]),e._v(" "),a("p",[e._v("​\t\t解决:WEB-INF是私有目录，只能通过路由访问，无法直接访问，直接访问呈现为本地路径且页面为源码。通常我们是使用与WEB-INF同级的文件不是WEB-INF的子级")]),e._v(" "),a("h2",{attrs:{id:"json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json"}},[e._v("#")]),e._v(" Json")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"index.jsp"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("这个地方是错误的，虽然不会报错但确实是引用不到src的文件的，因为script不支持单闭合\n")])])]),a("p",[e._v("JS和Json的相互转化")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var user={\n    name:"李浩",\n    age:20,\n    sex:"男"\n}\nconsole.log(user);\n\n//将js对象转化为json对象\nvar json=JSON.stringify(user);\nconsole.log(json);\nconsole.log(user);\n\n//将json对象转化为js对象\nvar obj=JSON.parse(json);\nconsole.log(obj);\n')])])]),a("h2",{attrs:{id:"mysql建库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql建库"}},[e._v("#")]),e._v(" Mysql建库")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("CREATE DATABASE `ssmbuild`;\n\nUSE `ssmbuild`;\n\nCREATE TABLE `books`(\n`bookID` INT(10) NOT NULL AUTO_INCREMENT COMMENT 书id,\n`bookName` VARCHAR(100) NOT NULL COMMENT 书名,\n`bookCounts` INT(11) NOT NULL COMMENT 数量,\n`detail` VARCHAR(200) NOT NULL COMMENT 描述,\nKEY `bookID`(`bookID`)\n)ENGINE=INNODB DEFAULT CHARSET=utf8;\n\nINSERT INTO `books`(`bookID`,`bookName`,`bookCounts`,`detail`) VALUES\n(1,Java,1,从入门到放弃),\n(2,MySQL,10,从删库到跑路),\n(3,Linux,5,从进门到进牢);\n")])])]),a("img",{attrs:{src:e.$withBase("/assets/img/image-20210725192359000.png")}}),e._v("\n报错：![image-20210725192359000](../.vuepress/public/assets/img/image-20210725192359000.png)\n"),a("p",[e._v("解决：需要将 书id 改为  '书id' 运行即可。")])])}),[],!1,null,null,null);n.default=r.exports}}]);